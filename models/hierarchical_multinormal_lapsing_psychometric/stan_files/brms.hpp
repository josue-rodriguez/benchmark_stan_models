
// Code generated by stanc v2.30.1
#include <stan/model/model_header.hpp>
namespace brms_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 76> locations_array__ = 
{" (found before start of program)",
 " (in './stan_files/parameters.stan', line 2, column 4, included from\n'stan_files/brms.stan', line 18, column 0)",
 " (in './stan_files/parameters.stan', line 3, column 4, included from\n'stan_files/brms.stan', line 18, column 0)",
 " (in './stan_files/parameters.stan', line 4, column 4, included from\n'stan_files/brms.stan', line 18, column 0)",
 " (in './stan_files/parameters.stan', line 5, column 4, included from\n'stan_files/brms.stan', line 18, column 0)",
 " (in './stan_files/parameters.stan', line 6, column 4, included from\n'stan_files/brms.stan', line 18, column 0)",
 " (in './stan_files/parameters.stan', line 7, column 4, included from\n'stan_files/brms.stan', line 18, column 0)",
 " (in './stan_files/transformed_parameters.stan', line 2, column 4, included from\n'stan_files/brms.stan', line 19, column 0)",
 " (in './stan_files/transformed_parameters.stan', line 4, column 4, included from\n'stan_files/brms.stan', line 19, column 0)",
 " (in './stan_files/transformed_parameters.stan', line 5, column 4, included from\n'stan_files/brms.stan', line 19, column 0)",
 " (in './stan_files/transformed_parameters.stan', line 7, column 4, included from\n'stan_files/brms.stan', line 19, column 0)",
 " (in './stan_files/transformed_parameters.stan', line 10, column 4, included from\n'stan_files/brms.stan', line 19, column 0)",
 " (in './stan_files/transformed_parameters.stan', line 11, column 4, included from\n'stan_files/brms.stan', line 19, column 0)",
 " (in './stan_files/transformed_parameters.stan', line 12, column 4, included from\n'stan_files/brms.stan', line 19, column 0)",
 " (in './stan_files/transformed_parameters.stan', line 14, column 4, included from\n'stan_files/brms.stan', line 19, column 0)",
 " (in './stan_files/transformed_parameters.stan', line 15, column 4, included from\n'stan_files/brms.stan', line 19, column 0)",
 " (in './stan_files/transformed_parameters.stan', line 17, column 4, included from\n'stan_files/brms.stan', line 19, column 0)",
 " (in './stan_files/transformed_parameters.stan', line 19, column 4, included from\n'stan_files/brms.stan', line 19, column 0)",
 " (in './stan_files/generated_quantities.stan', line 3, column 4, included from\n'stan_files/brms.stan', line 21, column 0)",
 " (in './stan_files/generated_quantities.stan', line 6, column 4, included from\n'stan_files/brms.stan', line 21, column 0)",
 " (in './stan_files/generated_quantities.stan', line 8, column 4, included from\n'stan_files/brms.stan', line 21, column 0)",
 " (in './stan_files/generated_quantities.stan', line 12, column 10, included from\n'stan_files/brms.stan', line 21, column 0)",
 " (in './stan_files/generated_quantities.stan', line 11, column 27, included from\n'stan_files/brms.stan', line 21, column 0)",
 " (in './stan_files/generated_quantities.stan', line 11, column 6, included from\n'stan_files/brms.stan', line 21, column 0)",
 " (in './stan_files/generated_quantities.stan', line 10, column 21, included from\n'stan_files/brms.stan', line 21, column 0)",
 " (in './stan_files/generated_quantities.stan', line 10, column 4, included from\n'stan_files/brms.stan', line 21, column 0)",
 " (in './stan_files/model.stan', line 5, column 15, included from\n'stan_files/brms.stan', line 20, column 0)",
 " (in './stan_files/model.stan', line 5, column 8, included from\n'stan_files/brms.stan', line 20, column 0)",
 " (in './stan_files/model.stan', line 8, column 12, included from\n'stan_files/brms.stan', line 20, column 0)",
 " (in './stan_files/model.stan', line 6, column 23, included from\n'stan_files/brms.stan', line 20, column 0)",
 " (in './stan_files/model.stan', line 6, column 8, included from\n'stan_files/brms.stan', line 20, column 0)",
 " (in './stan_files/model.stan', line 13, column 8, included from\n'stan_files/brms.stan', line 20, column 0)",
 " (in './stan_files/model.stan', line 3, column 21, included from\n'stan_files/brms.stan', line 20, column 0)",
 " (in './stan_files/model.stan', line 3, column 4, included from\n'stan_files/brms.stan', line 20, column 0)",
 " (in './stan_files/model.stan', line 16, column 4, included from\n'stan_files/brms.stan', line 20, column 0)",
 " (in './stan_files/model.stan', line 17, column 4, included from\n'stan_files/brms.stan', line 20, column 0)",
 " (in './stan_files/data.stan', line 3, column 4, included from\n'stan_files/brms.stan', line 16, column 0)",
 " (in './stan_files/data.stan', line 4, column 11, included from\n'stan_files/brms.stan', line 16, column 0)",
 " (in './stan_files/data.stan', line 4, column 4, included from\n'stan_files/brms.stan', line 16, column 0)",
 " (in './stan_files/data.stan', line 5, column 4, included from\n'stan_files/brms.stan', line 16, column 0)",
 " (in './stan_files/data.stan', line 6, column 11, included from\n'stan_files/brms.stan', line 16, column 0)",
 " (in './stan_files/data.stan', line 6, column 14, included from\n'stan_files/brms.stan', line 16, column 0)",
 " (in './stan_files/data.stan', line 6, column 4, included from\n'stan_files/brms.stan', line 16, column 0)",
 " (in './stan_files/data.stan', line 8, column 4, included from\n'stan_files/brms.stan', line 16, column 0)",
 " (in './stan_files/data.stan', line 9, column 4, included from\n'stan_files/brms.stan', line 16, column 0)",
 " (in './stan_files/data.stan', line 10, column 21, included from\n'stan_files/brms.stan', line 16, column 0)",
 " (in './stan_files/data.stan', line 10, column 4, included from\n'stan_files/brms.stan', line 16, column 0)",
 " (in './stan_files/data.stan', line 12, column 11, included from\n'stan_files/brms.stan', line 16, column 0)",
 " (in './stan_files/data.stan', line 12, column 4, included from\n'stan_files/brms.stan', line 16, column 0)",
 " (in './stan_files/data.stan', line 13, column 11, included from\n'stan_files/brms.stan', line 16, column 0)",
 " (in './stan_files/data.stan', line 13, column 4, included from\n'stan_files/brms.stan', line 16, column 0)",
 " (in './stan_files/data.stan', line 14, column 4, included from\n'stan_files/brms.stan', line 16, column 0)",
 " (in './stan_files/data.stan', line 15, column 4, included from\n'stan_files/brms.stan', line 16, column 0)",
 " (in './stan_files/transformed_data.stan', line 2, column 4, included from\n'stan_files/brms.stan', line 17, column 0)",
 " (in './stan_files/transformed_data.stan', line 3, column 11, included from\n'stan_files/brms.stan', line 17, column 0)",
 " (in './stan_files/transformed_data.stan', line 3, column 14, included from\n'stan_files/brms.stan', line 17, column 0)",
 " (in './stan_files/transformed_data.stan', line 3, column 4, included from\n'stan_files/brms.stan', line 17, column 0)",
 " (in './stan_files/transformed_data.stan', line 4, column 11, included from\n'stan_files/brms.stan', line 17, column 0)",
 " (in './stan_files/transformed_data.stan', line 4, column 4, included from\n'stan_files/brms.stan', line 17, column 0)",
 " (in './stan_files/transformed_data.stan', line 8, column 8, included from\n'stan_files/brms.stan', line 17, column 0)",
 " (in './stan_files/transformed_data.stan', line 9, column 8, included from\n'stan_files/brms.stan', line 17, column 0)",
 " (in './stan_files/transformed_data.stan', line 7, column 19, included from\n'stan_files/brms.stan', line 17, column 0)",
 " (in './stan_files/transformed_data.stan', line 7, column 4, included from\n'stan_files/brms.stan', line 17, column 0)",
 " (in './stan_files/parameters.stan', line 2, column 11, included from\n'stan_files/brms.stan', line 18, column 0)",
 " (in './stan_files/parameters.stan', line 5, column 20, included from\n'stan_files/brms.stan', line 18, column 0)",
 " (in './stan_files/parameters.stan', line 6, column 11, included from\n'stan_files/brms.stan', line 18, column 0)",
 " (in './stan_files/parameters.stan', line 6, column 16, included from\n'stan_files/brms.stan', line 18, column 0)",
 " (in './stan_files/parameters.stan', line 7, column 25, included from\n'stan_files/brms.stan', line 18, column 0)",
 " (in './stan_files/transformed_parameters.stan', line 2, column 11, included from\n'stan_files/brms.stan', line 19, column 0)",
 " (in './stan_files/transformed_parameters.stan', line 2, column 16, included from\n'stan_files/brms.stan', line 19, column 0)",
 " (in './stan_files/transformed_parameters.stan', line 4, column 11, included from\n'stan_files/brms.stan', line 19, column 0)",
 " (in './stan_files/transformed_parameters.stan', line 5, column 11, included from\n'stan_files/brms.stan', line 19, column 0)",
 " (in './stan_files/generated_quantities.stan', line 6, column 30, included from\n'stan_files/brms.stan', line 21, column 0)",
 " (in './stan_files/generated_quantities.stan', line 8, column 16, included from\n'stan_files/brms.stan', line 21, column 0)",
 " (in 'stan_files/brms.stan', line 12, column 4 to column 51)",
 " (in 'stan_files/brms.stan', line 10, column 52 to line 13, column 3)"};

struct scale_r_cor_functor__ {
  template <typename T0__, typename T1__, typename T2__,
            stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                                stan::is_vt_not_complex<T0__>,
                                stan::is_col_vector<T1__>,
                                stan::is_vt_not_complex<T1__>,
                                stan::is_eigen_matrix_dynamic<T2__>,
                                stan::is_vt_not_complex<T2__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
                       stan::base_type_t<T2__>>, -1, -1>
  operator()(const T0__& z, const T1__& SD, const T2__& L,
             std::ostream* pstream__) const;
};

template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
                     stan::base_type_t<T2__>>, -1, -1>
  scale_r_cor(const T0__& z_arg__, const T1__& SD_arg__, const T2__& L_arg__,
              std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::base_type_t<T0__>,
                                 stan::base_type_t<T1__>,
                                 stan::base_type_t<T2__>>;
    int current_statement__ = 0; 
    const auto& z = stan::math::to_ref(z_arg__);
    const auto& SD = stan::math::to_ref(SD_arg__);
    const auto& L = stan::math::to_ref(L_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 74;
      return stan::math::transpose(
               stan::math::multiply(stan::math::diag_pre_multiply(SD, L), z));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
                     stan::base_type_t<T2__>>, -1, -1>
scale_r_cor_functor__::operator()(const T0__& z, const T1__& SD,
                                  const T2__& L, std::ostream* pstream__) 
const
{
  return scale_r_cor(z, SD, L, pstream__);
}

 class brms_model final : public model_base_crtp<brms_model> {

 private:
  int N;
  Eigen::Matrix<double, -1, 1> Y_data__;
  int K;
  Eigen::Matrix<double, -1, -1> X_data__;
  int N_1;
  int M_1;
  std::vector<int> J_1;
  Eigen::Matrix<double, -1, 1> Z_1_1_data__;
  Eigen::Matrix<double, -1, 1> Z_1_2_data__;
  int NC_1;
  int prior_only;
  int Kc;
  Eigen::Matrix<double, -1, -1> Xc_data__;
  Eigen::Matrix<double, -1, 1> means_X_data__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> Y{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> X{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> Z_1_1{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> Z_1_2{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> Xc{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> means_X{nullptr, 0};
 
 public:
  ~brms_model() { }
  
  inline std::string model_name() const final { return "brms_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.30.1", "stancflags = --include-paths ./stan_files"};
  }
  
  
  brms_model(stan::io::var_context& context__,
             unsigned int random_seed__ = 0,
             std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "brms_model_namespace::brms_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 36;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      
      current_statement__ = 36;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 36;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 37;
      stan::math::validate_non_negative_index("Y", "N", N);
      current_statement__ = 38;
      context__.validate_dims("data initialization","Y","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      Y_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&Y) Eigen::Map<Eigen::Matrix<double, -1, 1>>(Y_data__.data(), N);
      
      {
        std::vector<local_scalar_t__> Y_flat__;
        current_statement__ = 38;
        Y_flat__ = context__.vals_r("Y");
        current_statement__ = 38;
        pos__ = 1;
        current_statement__ = 38;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 38;
          stan::model::assign(Y, Y_flat__[(pos__ - 1)],
            "assigning variable Y", stan::model::index_uni(sym1__));
          current_statement__ = 38;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 39;
      context__.validate_dims("data initialization","K","int",
           std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      
      
      current_statement__ = 39;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 39;
      stan::math::check_greater_or_equal(function__, "K", K, 1);
      current_statement__ = 40;
      stan::math::validate_non_negative_index("X", "N", N);
      current_statement__ = 41;
      stan::math::validate_non_negative_index("X", "K", K);
      current_statement__ = 42;
      context__.validate_dims("data initialization","X","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(K)});
      X_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant(N, K,
          std::numeric_limits<double>::quiet_NaN());
      new (&X) Eigen::Map<Eigen::Matrix<double, -1, -1>>(X_data__.data(), N, K);
        
      
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 42;
        X_flat__ = context__.vals_r("X");
        current_statement__ = 42;
        pos__ = 1;
        current_statement__ = 42;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 42;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 42;
            stan::model::assign(X, X_flat__[(pos__ - 1)],
              "assigning variable X", stan::model::index_uni(sym2__),
                                        stan::model::index_uni(sym1__));
            current_statement__ = 42;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 43;
      context__.validate_dims("data initialization","N_1","int",
           std::vector<size_t>{});
      N_1 = std::numeric_limits<int>::min();
      
      
      current_statement__ = 43;
      N_1 = context__.vals_i("N_1")[(1 - 1)];
      current_statement__ = 43;
      stan::math::check_greater_or_equal(function__, "N_1", N_1, 1);
      current_statement__ = 44;
      context__.validate_dims("data initialization","M_1","int",
           std::vector<size_t>{});
      M_1 = std::numeric_limits<int>::min();
      
      
      current_statement__ = 44;
      M_1 = context__.vals_i("M_1")[(1 - 1)];
      current_statement__ = 44;
      stan::math::check_greater_or_equal(function__, "M_1", M_1, 1);
      current_statement__ = 45;
      stan::math::validate_non_negative_index("J_1", "N", N);
      current_statement__ = 46;
      context__.validate_dims("data initialization","J_1","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      J_1 = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 46;
      J_1 = context__.vals_i("J_1");
      current_statement__ = 46;
      stan::math::check_greater_or_equal(function__, "J_1", J_1, 1);
      current_statement__ = 47;
      stan::math::validate_non_negative_index("Z_1_1", "N", N);
      current_statement__ = 48;
      context__.validate_dims("data initialization","Z_1_1","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      Z_1_1_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&Z_1_1) Eigen::Map<Eigen::Matrix<double, -1, 1>>(Z_1_1_data__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> Z_1_1_flat__;
        current_statement__ = 48;
        Z_1_1_flat__ = context__.vals_r("Z_1_1");
        current_statement__ = 48;
        pos__ = 1;
        current_statement__ = 48;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 48;
          stan::model::assign(Z_1_1, Z_1_1_flat__[(pos__ - 1)],
            "assigning variable Z_1_1", stan::model::index_uni(sym1__));
          current_statement__ = 48;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 49;
      stan::math::validate_non_negative_index("Z_1_2", "N", N);
      current_statement__ = 50;
      context__.validate_dims("data initialization","Z_1_2","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      Z_1_2_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&Z_1_2) Eigen::Map<Eigen::Matrix<double, -1, 1>>(Z_1_2_data__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> Z_1_2_flat__;
        current_statement__ = 50;
        Z_1_2_flat__ = context__.vals_r("Z_1_2");
        current_statement__ = 50;
        pos__ = 1;
        current_statement__ = 50;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 50;
          stan::model::assign(Z_1_2, Z_1_2_flat__[(pos__ - 1)],
            "assigning variable Z_1_2", stan::model::index_uni(sym1__));
          current_statement__ = 50;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 51;
      context__.validate_dims("data initialization","NC_1","int",
           std::vector<size_t>{});
      NC_1 = std::numeric_limits<int>::min();
      
      
      current_statement__ = 51;
      NC_1 = context__.vals_i("NC_1")[(1 - 1)];
      current_statement__ = 51;
      stan::math::check_greater_or_equal(function__, "NC_1", NC_1, 1);
      current_statement__ = 52;
      context__.validate_dims("data initialization","prior_only","int",
           std::vector<size_t>{});
      prior_only = std::numeric_limits<int>::min();
      
      
      current_statement__ = 52;
      prior_only = context__.vals_i("prior_only")[(1 - 1)];
      current_statement__ = 53;
      Kc = std::numeric_limits<int>::min();
      
      
      current_statement__ = 53;
      Kc = (K - 1);
      current_statement__ = 54;
      stan::math::validate_non_negative_index("Xc", "N", N);
      current_statement__ = 55;
      stan::math::validate_non_negative_index("Xc", "Kc", Kc);
      current_statement__ = 56;
      Xc_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant(N, Kc,
          std::numeric_limits<double>::quiet_NaN());
      new (&Xc) Eigen::Map<Eigen::Matrix<double, -1, -1>>(Xc_data__.data(), N, Kc);
        
      
      current_statement__ = 57;
      stan::math::validate_non_negative_index("means_X", "Kc", Kc);
      current_statement__ = 58;
      means_X_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(Kc,
          std::numeric_limits<double>::quiet_NaN());
      new (&means_X) Eigen::Map<Eigen::Matrix<double, -1, 1>>(means_X_data__.data(), Kc);
        
      
      current_statement__ = 62;
      for (int i = 2; i <= K; ++i) {
        current_statement__ = 59;
        stan::model::assign(means_X,
          stan::math::mean(
            stan::model::rvalue(X, "X",
              stan::model::index_omni(), stan::model::index_uni(i))),
          "assigning variable means_X", stan::model::index_uni((i - 1)));
        current_statement__ = 60;
        stan::model::assign(Xc,
          stan::math::subtract(
            stan::model::rvalue(X, "X",
              stan::model::index_omni(), stan::model::index_uni(i)),
            stan::model::rvalue(means_X, "means_X",
              stan::model::index_uni((i - 1)))),
          "assigning variable Xc", stan::model::index_omni(),
                                     stan::model::index_uni((i - 1)));
      }
      current_statement__ = 63;
      stan::math::validate_non_negative_index("b", "Kc", Kc);
      current_statement__ = 64;
      stan::math::validate_non_negative_index("sd_1", "M_1", M_1);
      current_statement__ = 65;
      stan::math::validate_non_negative_index("z_1", "M_1", M_1);
      current_statement__ = 66;
      stan::math::validate_non_negative_index("z_1", "N_1", N_1);
      current_statement__ = 67;
      stan::math::validate_non_negative_index("L_1", "M_1", M_1);
      current_statement__ = 67;
      stan::math::validate_non_negative_index("L_1", "M_1", M_1);
      current_statement__ = 68;
      stan::math::validate_non_negative_index("r_1", "N_1", N_1);
      current_statement__ = 69;
      stan::math::validate_non_negative_index("r_1", "M_1", M_1);
      current_statement__ = 70;
      stan::math::validate_non_negative_index("r_1_1", "N_1", N_1);
      current_statement__ = 71;
      stan::math::validate_non_negative_index("r_1_2", "N_1", N_1);
      current_statement__ = 72;
      stan::math::validate_non_negative_index("cor_1", "NC_1", NC_1);
      current_statement__ = 73;
      stan::math::validate_non_negative_index("Cor_1", "M_1", M_1);
      current_statement__ = 73;
      stan::math::validate_non_negative_index("Cor_1", "M_1", M_1);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = Kc + 1 + 1 + M_1 + (M_1 * N_1) + ((M_1 * (M_1 - 1)) / 2)
      ;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "brms_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> b =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(Kc, DUMMY_VAR__);
      current_statement__ = 1;
      b = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(Kc);
      local_scalar_t__ Intercept = DUMMY_VAR__;
      current_statement__ = 2;
      Intercept = in__.template read<local_scalar_t__>();
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 3;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> sd_1 =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(M_1, DUMMY_VAR__);
      current_statement__ = 4;
      sd_1 = in__.template read_constrain_lb<
               Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0, lp__,
               M_1);
      Eigen::Matrix<local_scalar_t__, -1, -1> z_1 =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(M_1, N_1,
           DUMMY_VAR__);
      current_statement__ = 5;
      z_1 = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(M_1,
              N_1);
      Eigen::Matrix<local_scalar_t__, -1, -1> L_1 =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(M_1, M_1,
           DUMMY_VAR__);
      current_statement__ = 6;
      L_1 = in__.template read_constrain_cholesky_factor_corr<
              Eigen::Matrix<local_scalar_t__, -1, -1>, jacobian__>(lp__, M_1);
      Eigen::Matrix<local_scalar_t__, -1, -1> r_1 =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N_1, M_1,
           DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, 1> r_1_1 =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_1, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, 1> r_1_2 =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_1, DUMMY_VAR__);
      local_scalar_t__ lprior = DUMMY_VAR__;
      current_statement__ = 10;
      lprior = 0;
      current_statement__ = 11;
      stan::model::assign(r_1, scale_r_cor(z_1, sd_1, L_1, pstream__),
        "assigning variable r_1");
      current_statement__ = 12;
      stan::model::assign(r_1_1,
        stan::model::rvalue(r_1, "r_1",
          stan::model::index_omni(), stan::model::index_uni(1)),
        "assigning variable r_1_1");
      current_statement__ = 13;
      stan::model::assign(r_1_2,
        stan::model::rvalue(r_1, "r_1",
          stan::model::index_omni(), stan::model::index_uni(2)),
        "assigning variable r_1_2");
      current_statement__ = 14;
      lprior = (lprior +
                 stan::math::student_t_lpdf<false>(Intercept, 3, 628, 314.4));
      current_statement__ = 15;
      lprior = (lprior +
                 (stan::math::student_t_lpdf<false>(sigma, 3, 0, 314.4) -
                   (1 * stan::math::student_t_lccdf(0, 3, 0, 314.4))));
      current_statement__ = 16;
      lprior = (lprior +
                 (stan::math::student_t_lpdf<false>(sd_1, 3, 0, 314.4) -
                   (2 * stan::math::student_t_lccdf(0, 3, 0, 314.4))));
      current_statement__ = 17;
      lprior = (lprior + stan::math::lkj_corr_cholesky_lpdf<false>(L_1, 1));
      {
        current_statement__ = 33;
        if (stan::math::logical_negation(prior_only)) {
          current_statement__ = 26;
          stan::math::validate_non_negative_index("mu", "N", N);
          Eigen::Matrix<local_scalar_t__, -1, 1> mu =
             Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
          current_statement__ = 27;
          stan::model::assign(mu,
            stan::math::add(Intercept, stan::math::rep_vector(0.0, N)),
            "assigning variable mu");
          current_statement__ = 30;
          for (int n = 1; n <= N; ++n) {
            current_statement__ = 28;
            stan::model::assign(mu,
              (stan::model::rvalue(mu, "mu", stan::model::index_uni(n)) +
                ((stan::model::rvalue(r_1_1, "r_1_1",
                    stan::model::index_uni(stan::model::rvalue(J_1, "J_1",
                                             stan::model::index_uni(n)))) *
                   stan::model::rvalue(Z_1_1, "Z_1_1",
                     stan::model::index_uni(n))) +
                  (stan::model::rvalue(r_1_2, "r_1_2",
                     stan::model::index_uni(stan::model::rvalue(J_1, "J_1",
                                              stan::model::index_uni(n)))) *
                    stan::model::rvalue(Z_1_2, "Z_1_2",
                      stan::model::index_uni(n))))),
              "assigning variable mu", stan::model::index_uni(n));
          }
          current_statement__ = 31;
          lp_accum__.add(
            stan::math::normal_id_glm_lpdf<false>(Y, Xc, mu, b, sigma));
        } 
        current_statement__ = 34;
        lp_accum__.add(lprior);
        current_statement__ = 35;
        lp_accum__.add(
          stan::math::std_normal_lpdf<false>(stan::math::to_vector(z_1)));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "brms_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> b =
         Eigen::Matrix<double, -1, 1>::Constant(Kc,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      b = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(Kc);
      double Intercept = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      Intercept = in__.template read<local_scalar_t__>();
      double sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      Eigen::Matrix<double, -1, 1> sd_1 =
         Eigen::Matrix<double, -1, 1>::Constant(M_1,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      sd_1 = in__.template read_constrain_lb<
               Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0, lp__,
               M_1);
      Eigen::Matrix<double, -1, -1> z_1 =
         Eigen::Matrix<double, -1, -1>::Constant(M_1, N_1,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      z_1 = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(M_1,
              N_1);
      Eigen::Matrix<double, -1, -1> L_1 =
         Eigen::Matrix<double, -1, -1>::Constant(M_1, M_1,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      L_1 = in__.template read_constrain_cholesky_factor_corr<
              Eigen::Matrix<local_scalar_t__, -1, -1>, jacobian__>(lp__, M_1);
      Eigen::Matrix<double, -1, -1> r_1 =
         Eigen::Matrix<double, -1, -1>::Constant(N_1, M_1,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> r_1_1 =
         Eigen::Matrix<double, -1, 1>::Constant(N_1,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> r_1_2 =
         Eigen::Matrix<double, -1, 1>::Constant(N_1,
           std::numeric_limits<double>::quiet_NaN());
      double lprior = std::numeric_limits<double>::quiet_NaN();
      out__.write(b);
      out__.write(Intercept);
      out__.write(sigma);
      out__.write(sd_1);
      out__.write(z_1);
      out__.write(L_1);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 10;
      lprior = 0;
      current_statement__ = 11;
      stan::model::assign(r_1, scale_r_cor(z_1, sd_1, L_1, pstream__),
        "assigning variable r_1");
      current_statement__ = 12;
      stan::model::assign(r_1_1,
        stan::model::rvalue(r_1, "r_1",
          stan::model::index_omni(), stan::model::index_uni(1)),
        "assigning variable r_1_1");
      current_statement__ = 13;
      stan::model::assign(r_1_2,
        stan::model::rvalue(r_1, "r_1",
          stan::model::index_omni(), stan::model::index_uni(2)),
        "assigning variable r_1_2");
      current_statement__ = 14;
      lprior = (lprior +
                 stan::math::student_t_lpdf<false>(Intercept, 3, 628, 314.4));
      current_statement__ = 15;
      lprior = (lprior +
                 (stan::math::student_t_lpdf<false>(sigma, 3, 0, 314.4) -
                   (1 * stan::math::student_t_lccdf(0, 3, 0, 314.4))));
      current_statement__ = 16;
      lprior = (lprior +
                 (stan::math::student_t_lpdf<false>(sd_1, 3, 0, 314.4) -
                   (2 * stan::math::student_t_lccdf(0, 3, 0, 314.4))));
      current_statement__ = 17;
      lprior = (lprior + stan::math::lkj_corr_cholesky_lpdf<false>(L_1, 1));
      if (emit_transformed_parameters__) {
        out__.write(r_1);
        out__.write(r_1_1);
        out__.write(r_1_2);
        out__.write(lprior);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      double b_Intercept = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 18;
      b_Intercept = (Intercept - stan::math::dot_product(means_X, b));
      Eigen::Matrix<double, -1, 1> cor_1 =
         Eigen::Matrix<double, -1, 1>::Constant(NC_1,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, -1> Cor_1 =
         Eigen::Matrix<double, -1, -1>::Constant(M_1, M_1,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 20;
      stan::model::assign(Cor_1,
        stan::math::multiply_lower_tri_self_transpose(L_1),
        "assigning variable Cor_1");
      current_statement__ = 25;
      for (int k = 1; k <= M_1; ++k) {
        current_statement__ = 23;
        for (int j = 1; j <= (k - 1); ++j) {
          current_statement__ = 21;
          stan::model::assign(cor_1,
            stan::model::rvalue(Cor_1, "Cor_1",
              stan::model::index_uni(j), stan::model::index_uni(k)),
            "assigning variable cor_1", stan::model::index_uni((stan::math::choose(
                                                                  (k - 1), 2)
                                                                 + j)));
        }
      }
      current_statement__ = 19;
      stan::math::check_greater_or_equal(function__, "cor_1", cor_1, -1);
      current_statement__ = 19;
      stan::math::check_less_or_equal(function__, "cor_1", cor_1, 1);
      current_statement__ = 20;
      stan::math::check_corr_matrix(function__, "Cor_1", Cor_1);
      out__.write(b_Intercept);
      out__.write(cor_1);
      out__.write(Cor_1);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__, -1, 1> b =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(Kc, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= Kc; ++sym1__) {
        stan::model::assign(b, in__.read<local_scalar_t__>(),
          "assigning variable b", stan::model::index_uni(sym1__));
      }
      out__.write(b);
      local_scalar_t__ Intercept = DUMMY_VAR__;
      Intercept = in__.read<local_scalar_t__>();
      out__.write(Intercept);
      local_scalar_t__ sigma = DUMMY_VAR__;
      sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma);
      Eigen::Matrix<local_scalar_t__, -1, 1> sd_1 =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(M_1, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= M_1; ++sym1__) {
        stan::model::assign(sd_1, in__.read<local_scalar_t__>(),
          "assigning variable sd_1", stan::model::index_uni(sym1__));
      }
      out__.write_free_lb(0, sd_1);
      Eigen::Matrix<local_scalar_t__, -1, -1> z_1 =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(M_1, N_1,
           DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= N_1; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M_1; ++sym2__) {
          stan::model::assign(z_1, in__.read<local_scalar_t__>(),
            "assigning variable z_1", stan::model::index_uni(sym2__),
                                        stan::model::index_uni(sym1__));
        }
      }
      out__.write(z_1);
      Eigen::Matrix<local_scalar_t__, -1, -1> L_1 =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(M_1, M_1,
           DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= M_1; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M_1; ++sym2__) {
          stan::model::assign(L_1, in__.read<local_scalar_t__>(),
            "assigning variable L_1", stan::model::index_uni(sym2__),
                                        stan::model::index_uni(sym1__));
        }
      }
      out__.write_free_cholesky_factor_corr(L_1);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"b", "Intercept", "sigma", "sd_1",
      "z_1", "L_1", "r_1", "r_1_1", "r_1_2", "lprior", "b_Intercept",
      "cor_1", "Cor_1"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(Kc)
                                                                   },
      std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(M_1)},
      std::vector<size_t>{static_cast<size_t>(M_1), static_cast<size_t>(N_1)},
      std::vector<size_t>{static_cast<size_t>(M_1), static_cast<size_t>(M_1)},
      std::vector<size_t>{static_cast<size_t>(N_1), static_cast<size_t>(M_1)},
      std::vector<size_t>{static_cast<size_t>(N_1)},
      std::vector<size_t>{static_cast<size_t>(N_1)}, std::vector<size_t>{
      }, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(NC_1)},
      std::vector<size_t>{static_cast<size_t>(M_1), static_cast<size_t>(M_1)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= Kc; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "b" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "Intercept");
    param_names__.emplace_back(std::string() + "sigma");
    for (int sym1__ = 1; sym1__ <= M_1; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sd_1" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_1; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= M_1; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "z_1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= M_1; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= M_1; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "L_1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= M_1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_1; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "r_1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "r_1_1" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "r_1_2" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "lprior");
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "b_Intercept");
      for (int sym1__ = 1; sym1__ <= NC_1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cor_1" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= M_1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= M_1; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Cor_1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= Kc; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "b" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "Intercept");
    param_names__.emplace_back(std::string() + "sigma");
    for (int sym1__ = 1; sym1__ <= M_1; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sd_1" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_1; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= M_1; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "z_1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= ((M_1 * (M_1 - 1)) / 2); ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "L_1" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= M_1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_1; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "r_1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "r_1_1" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "r_1_2" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "lprior");
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "b_Intercept");
      for (int sym1__ = 1; sym1__ <= NC_1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cor_1" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= ((M_1 * (M_1 - 1)) / 2); ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Cor_1" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"b\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Kc) + "},\"block\":\"parameters\"},{\"name\":\"Intercept\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M_1) + "},\"block\":\"parameters\"},{\"name\":\"z_1\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(M_1) + ",\"cols\":" + std::to_string(N_1) + "},\"block\":\"parameters\"},{\"name\":\"L_1\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(M_1) + ",\"cols\":" + std::to_string(M_1) + "},\"block\":\"parameters\"},{\"name\":\"r_1\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_1) + ",\"cols\":" + std::to_string(M_1) + "},\"block\":\"transformed_parameters\"},{\"name\":\"r_1_1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_1) + "},\"block\":\"transformed_parameters\"},{\"name\":\"r_1_2\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_1) + "},\"block\":\"transformed_parameters\"},{\"name\":\"lprior\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"b_Intercept\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"cor_1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NC_1) + "},\"block\":\"generated_quantities\"},{\"name\":\"Cor_1\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(M_1) + ",\"cols\":" + std::to_string(M_1) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"b\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Kc) + "},\"block\":\"parameters\"},{\"name\":\"Intercept\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M_1) + "},\"block\":\"parameters\"},{\"name\":\"z_1\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(M_1) + ",\"cols\":" + std::to_string(N_1) + "},\"block\":\"parameters\"},{\"name\":\"L_1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(((M_1 * (M_1 - 1)) / 2)) + "},\"block\":\"parameters\"},{\"name\":\"r_1\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_1) + ",\"cols\":" + std::to_string(M_1) + "},\"block\":\"transformed_parameters\"},{\"name\":\"r_1_1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_1) + "},\"block\":\"transformed_parameters\"},{\"name\":\"r_1_2\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_1) + "},\"block\":\"transformed_parameters\"},{\"name\":\"lprior\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"b_Intercept\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"cor_1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NC_1) + "},\"block\":\"generated_quantities\"},{\"name\":\"Cor_1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(((M_1 * (M_1 - 1)) / 2)) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((((Kc + 1) + 1) + M_1) + (M_1 * N_1)) + (M_1 * M_1));
      const size_t num_transformed = emit_transformed_parameters * 
  ((((N_1 * M_1) + N_1) + N_1) + 1);
      const size_t num_gen_quantities = emit_generated_quantities * 
  ((1 + NC_1) + (M_1 * M_1));
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      std::vector<int> params_i;
      vars = Eigen::Matrix<double, Eigen::Dynamic, 1>::Constant(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((((Kc + 1) + 1) + M_1) + (M_1 * N_1)) + (M_1 * M_1));
      const size_t num_transformed = emit_transformed_parameters * 
  ((((N_1 * M_1) + N_1) + N_1) + 1);
      const size_t num_gen_quantities = emit_generated_quantities * 
  ((1 + NC_1) + (M_1 * M_1));
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      vars = std::vector<double>(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 6> names__{"b", "Intercept", "sigma",
      "sd_1", "z_1", "L_1"};
      const std::array<Eigen::Index, 6> constrain_param_sizes__{Kc, 1, 
       1, M_1, (M_1 * N_1), (M_1 * M_1)};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } using stan_model = brms_model_namespace::brms_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return brms_model_namespace::profiles__;
}

#endif


